import PostModel from "../models/Post.js"


export const create = async (req, res) => {
	console.log('üöÄ req.userId in create controller:', req.userId);

	try {
		const doc = new PostModel({
			title: req.body.title,
			text: req.body.text,
			imageUrl: req.body.imageUrl,
			tags: req.body.tags.split(','),
			user: req.userId,
		});

		const post = await doc.save();
		res.json(post);
	} catch (err) {
		console.log('‚ùå Error creating post:', err);

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
		if (err.code === 11000) {
			return res.status(400).json({
				message: '–ü–æ—Å—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
			});
		}

		res.status(500).json({
			message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é',
		});
	}
};


// controllers/posts.js
export const getLastTags = async (req, res) => {
	try {
		const { sort = 'new' } = req.query; // ‚Üê –ø–æ–ª—É—á–∞–µ–º sort –∏–∑ query

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ—Å—Ç–æ–≤
		const sortBy = sort === 'popular'
			? { viewsCount: -1 }
			: { createdAt: -1 };

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤ (—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π)
		const posts = await PostModel.find()
			.sort(sortBy)
			.limit(5)
			.exec();

		// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ –ø–æ—Å—Ç–æ–≤
		const allTags = posts
			.map(post => post.tags)
			.flat(); // ‚Üê —É–±–∏—Ä–∞–µ–º .sort(sortOption)

		// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
		const tagCountMap = allTags.reduce((acc, tag) => {
			acc[tag] = (acc[tag] || 0) + 1;
			return acc;
		}, {});

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ (–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏)
		const tagsWithCount = Object.entries(tagCountMap)
			.map(([name, count]) => ({ name, count }))
			.sort((a, b) => b.count - a.count) // ‚Üê —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
			.slice(0, 10); // —Ç–æ–ø-10

		res.json(tagsWithCount);
	} catch (err) {
		console.log(err);
		res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏' });
	}
};

// controllers/posts.js

export const getAll = async (req, res) => {
	try {
		const { sort = "new", tag, tags } = req.query; // tags = "react,js"

		const filters = {};

		// –§–∏–ª—å—Ç—Ä –ø–æ –æ–¥–Ω–æ–º—É —Ç–µ–≥—É
		if (tag) {
			filters.tags = { $in: [tag] };
		}

		// –§–∏–ª—å—Ç—Ä –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–µ–≥–∞–º
		if (tags) {
			const tagList = tags.split(",").filter(Boolean);
			filters.tags = { $all: tagList }; // –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –í–°–ï —Ç–µ–≥–∏
		}

		const sortBy = sort === "popular" ? { viewsCount: -1 } : { createdAt: -1 };

		const posts = await PostModel.find(filters)
			.populate("user")
			.sort(sortBy)
			.exec();

		res.json(posts);
	} catch (err) {
		res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤" });
	}
};


export const getOne = async (req, res) => {
	try {
		const postId = req.params.id;

		const doc = await PostModel.findByIdAndUpdate(
			postId,
			{ $inc: { viewsCount: 1 } },
			{ new: true }
		).populate('user', 'fullName avatarUrl'); // ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

		if (!doc) {
			return res.status(404).json({ message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
		}

		res.json(doc);
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ getOne:', err);
		res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞' });
	}
};


export const remove = async (req, res) => {
	try {
		const postId = req.params.id;

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
		const doc = await PostModel.findOneAndDelete({
			_id: postId
		});

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω
		if (!doc) {
			return res.status(404).json({
				message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
			});
		}

		res.json({
			success: true,
			message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
		});

	} catch (err) {
		console.error(err);
		res.status(500).json({
			message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏'
		});
	}
};

export const update = async (req, res) => {
	try {
		const postId = req.params.id;
		await PostModel.updateOne({
			_id: postId,
		}, {
			title: req.body.title,
			text: req.body.text,
			imageUrl: req.body.imageUrl,
			tags: req.body.tags.split(','),
			user: req.userId,
		},);
		res.json({
			success: true,
			message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞'
		});

	} catch (err) {
		console.error(err);
		res.status(500).json({
			message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏'
		});
	}
}
